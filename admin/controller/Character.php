<?php/** * Created by PhpStorm. * User: gzl * Date: 2018/4/12 * Time: 上午10:22 */namespace app\admin\controller;use app\admin\model\Character as CharModel;use app\admin\model\Method as MethodModel;class Character extends Base{	//角色列表模版	public function char(){		return $this->fetch();	}		/**	 * 获取角色列表	 * @return \think\response\Json	 * @throws \think\exception\DbException	 */	public function charList(){		$get = $this->request->get();		return CharModel::charList($get['page'], $get['limit']);	}		//删除角色	public function charDel(){		if(!$this->request->isPost()){			return json_code('error', '404', '请求方式错误');		}		$id = $this->request->post('id');		if(!$id){			return json_code('error', '404', '参数错误');		}		$del = CharModel::charDel($id);		if(!$del){			return json_code('error', '404', '删除失败');		}		return json_code('ok', '200', '删除成功');	}		//权限管理	public function charAuto(){		$id = $this->request->get('id');		$method = $this->method($id);		$all = MethodModel::all();		$all = $this->treeMethod($all);		dump($all);die;		$this->assign('all', $all);		$this->assign('id', $id);		$this->assign('method', $method);		return $this->fetch();	}		/**	 * 编辑角色信息	 * @return mixed|string	 * @throws \think\exception\DbException	 */	public function charEdit(){		if($this->request->isPost()){			$post = $this->request->post();			$data = ['name' => $post['name']];			$res = $this->validate($data,'app\admin\validate\Character.charEdit');			if($res !== true){				return json_code('error', '404', $res);			}			$char = CharModel::charEdit($post['name'], $post['id']);			if($char){				return json_code('ok', '200', '成功');			}			return json_code('error', '404', '失败');		}		$id = $this->request->get('id');		$res = CharModel::getChar($id);		$this->assign('res', $res);		return $this->fetch();	}		/**	 * 查询角色权限	 * @param $id	 * @return array|\PDOStatement|string|\think\Collection	 * @throws \think\db\exception\DataNotFoundException	 * @throws \think\db\exception\ModelNotFoundException	 * @throws \think\exception\DbException	 */	public function method($id){		$char = CharModel::get($id);		$method = $char->auth()->column('method_id');		$method = MethodModel::where('id', 'in', $method)->select();		return $method;	}		public function treeMethod($arr, $pid = 0, $type = 1){		static $data = [];		foreach($arr as $key => $v){			if($v['pid'] == $pid){				$v['type'] = $type;				$data[$v['name']] = $v;				$this->treeMethod($arr, $v['id'], $type + 1);			}		}		return $data;	}}